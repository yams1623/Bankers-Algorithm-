#include <stdio.h> 
const 	int n = 3; 
const int 	m = 3;
void safesequence(int [][m],int [][m],int [m]);
void calculate_need(int a[m],int alloc[][m],int max[][m],int request_array[m],int process_no){
	
int need[n][m]; 
int x=0;
	for(x = 0; x < n; x++) { int j=0;
		for ( j = 0; j < m; j++) 
			need[x][j] = max[x][j] - alloc[x][j]; 
	} 	
	int i=0;
	for( i=0;i<n;i++){
		if(request_array[i]>need[process_no][i]||request_array[i]>a[i]){
			break;
		}
	}
//	printf("%d",i);
	
	if(i==n){
	printf("request  granted\n");
	int i=0;
		for(  i=0;i<n;i++){
			
			alloc[process_no][i]+=request_array[i];
			need[process_no][i]-=request_array[i];
			a[i]-=request_array[i];
	}
		
		
		
	}
	else{
		printf("request not granted\n");
		return;
	}
	safesequence(need,alloc,a);
	
	
}
void safesequence(int need[][m],int alloc[][m],int avail[m]){

	int f[n], ans[n], ind = 0; int z=0;
	for (z = 0; z< n; z++) { 
		f[z] = 0; 
	} 
	
	int y = 0; 
	int k=0;
	while(ind<m) 
	{
	 int i=0;int found=0;
		for (i = 0; i < n; i++) 
		{ 
			if (f[i] == 0)
			 { 

				int flag = 0;int j; 
				for (j = 0; j < m; j++) { 
					if (need[i][j] > avail[j]) 
						flag = 1; 
					break; 
				} 

				if (flag == 0) { 
					ans[ind++] = i; 
					for (y = 0; y < m; y++) 
						avail[y] += alloc[i][y]; 
					f[i] = 1; 
					found=1;
				} 
			} 
		} 
		if(found==0){
			printf("oops no sqeuence exist\n");
			return;
		}
	} 

	printf("Following is the SAFE Sequence\n"); int i;
	for (i = 0; i < n - 1; i++) 
		printf(" P%d ->", ans[i]); 
	printf(" P%d", ans[n - 1]); 
}







int main() 
{ 
	// P0, P1, P2, P3, P4 are the Process names here 

	int  i, j, k; 
	int a[3][3];
	int p[3][3];
	
	int h,d;
	printf("\n\nplease enter the allocated resources\n\n");
	for(h=0;h<3;h++)
	{
		for(d=0;d<3;d++)
		{
		
		scanf("%d",&a[h][d]);
	}
	}
	printf("\n\nplease enter the maximum resources\n\n");
	int h1;
	for(h1=0;h1<3;h1++)
	{int d1=0;
		for(d1=0;d1<3;d1++)
		{
		
		scanf("%d",&p[h1][d1]);
	}
	}
	 
 // Number of resources 
	int alloc[3][3]; //= a[3][3];

	int max[3][3]; //= p[3][3];
	int x,y;
		for(x=0;x<3;x++)
	{
		for(y=0;y<3;y++)
		{
		
		alloc[x][y]=a[x][y];
		max[x][y]=p[x][y];
		
		}
	}
	int g=0;
	printf("enter no of request\n");
	scanf("%d",&g);
		while(g--){
		
	printf("enter process number\n");
	int request_array[n];
	int process_no;
	scanf("%d",&process_no);
	
	printf("enter process_array number\n");
	for( i=0;i<n;i++){
		scanf("%d",&request_array[i]);
	}

	int avail[3] = { 3, 2, 2 }; // Available Resources 
	
	calculate_need(avail,alloc,max,request_array,process_no);
 // safesequence(avail,alloc,max);
}
	return (0); 

} 
